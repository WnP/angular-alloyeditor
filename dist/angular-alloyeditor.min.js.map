{"version":3,"sources":["angular-alloyeditor.js"],"names":["root","factory","define","amd","angular","this","module","directive","$q","$parse","$timeout","preLink","$scope","$element","$attributes","$controllers","controller","editorElement","find","attr","id","createInstance","postLink","ngModelController","ready","then","forEach","event","onEvent","$setViewValue","nativeEditor","getData","$watch","readonly","newValue","oldValue","setReadOnly","$setTouched","onready","$render","setData","$viewValue","noSnapshot","callback","fire","compile","tElement","tAttrs","transclude","Error","pre","post","instance","self","readyDeferred","defer","elementId","console","log","AlloyEditor","editable","resolve","listener","asyncListener","args","arguments","applyListener","apply","$apply","on","removeListener","promise","get","$on","destroy","restrict","require","template"],"mappings":"CAAC,SAAUA,EAAMC,GAEO,kBAAXC,SAAyBA,OAAOC,IAAKD,QAAQ,WAAYD,GAE/DA,EAAQG,UACbC,KAAM,SAAUD,GAChB,YAEA,IAAIE,GAASF,EAAQE,OAAO,iBAE5BA,GAAOC,UAAU,eACf,KAAM,SAAU,WAChB,SAA+BC,EAAIC,EAAQC,GAEzC,QAASC,GAAQC,EAAQC,EAAUC,EAAaC,GAC9C,GAAIC,GAAaD,EAAa,GAE1BE,GADoBF,EAAa,GACjBF,EAASK,KAAK,OAClCD,GAAcE,KAAK,KAAML,EAAYM,GAAK,YAC1CJ,EAAWK,eAAeJ,EAAcE,KAAK,OAG/C,QAASG,GAASV,EAAQC,EAAUC,EAAaC,GAC/C,GAAIC,GAAaD,EAAa,GAC1BQ,EAAoBR,EAAa,EACjBF,GAASK,KAAK,MAGlCF,GAAWQ,QAAQC,KAAK,YAErB,SAAU,QAAQC,QAAQ,SAAuBC,GAChDX,EAAWY,QAAQD,EAAO,WACxBJ,EAAkBM,cAAcb,EAAWc,eAAeC,WAAa,QAI3EnB,EAAOoB,OAAOlB,EAAYmB,SAAU,SAAUC,EAAUC,GACnDD,GAAYC,GACbnB,EAAWc,eAAeM,cAAeF,KAI7ClB,EAAWY,QAAQ,QAAS,WAC1BL,EAAkBc,gBAKpB3B,EAAS,WACPD,EAAOK,EAAYwB,SAAS1B,OAMhCW,EAAkBgB,QAAU,WAC1BvB,EAAWQ,QAAQC,KAAK,WACtBT,EAAWc,eAAeU,QAAQjB,EAAkBkB,YAAc,IAChEC,YAAY,EACZC,SAAU,WAIR3B,EAAWc,eAAec,KAAK,wBAuFzC,QAASC,GAAQC,EAAUC,EAAQC,GACjC,IAAID,EAAO3B,GACT,KAAM6B,OAAM,mDAEd,QACEC,IAAKvC,EACLwC,KAAM7B,GAtFV,GAAIN,IACF,KAAM,SACN,SAA+BR,EAAII,GACjC,GACIwC,GADAC,EAAOhD,KAEPiD,EAAgB9C,EAAG+C,OASvBF,GAAKhC,eAAiB,SAAwBmC,GAC5CC,QAAQC,IAAI,WAAYF,EAAYG,YAAaA,YAAYC,UAC7DR,EAAWO,YAAYC,SAASJ,GAChCC,QAAQC,IAAI,YACZL,EAAKzB,QAAQ,gBAAiB,WAC5B0B,EAAcO,SAAQ,KAGxBJ,QAAQC,IAAI,aAYdL,EAAKzB,QAAU,SAAUD,EAAOmC,GAG9B,QAASC,KACP,GAAIC,GAAOC,SACXvD,GAAS,WACPwD,EAAcC,MAAM,KAAMH,KAI9B,QAASE,KACP,GAAIF,GAAOC,SACXrD,GAAOwD,OAAO,WACZN,EAASK,MAAM,KAAMH,KAKzB,MAjBAX,GAAKvB,eAAeuC,GAAG1C,EAAOoC,GAiBvB,WACLV,EAAKvB,eAAewC,eAAe3C,EAAOuC,KAS9Cb,EAAK7B,MAAQ,WACX,MAAO8B,GAAciB,SAGvBlB,EAAKvB,aAAe,WAClB,MAAOsB,GAASoB,IAAI,iBAItB5D,EAAO6D,IAAI,WAAY,WAErBnB,EAAciB,QAAQ9C,KAAK,WACzB2B,EAASsB,eAgBjB,QACEC,SAAU,IACVC,SAAU,cAAe,WACzBC,SAAU,mCACV7D,WAAYA,EACZ6B,QAASA","file":"angular-alloyeditor.min.js","sourcesContent":["(function (root, factory) {\n  // AMD\n  if (typeof define === 'function' && define.amd) define(['angular'], factory);\n  // Global\n  else factory(angular);\n}(this, function (angular) {\n  'use strict';\n\n  var module = angular.module('alloyeditor', []);\n\n  module.directive('alloyEditor', [\n    '$q', '$parse', '$timeout',\n    function alloyEditorDirective ($q, $parse, $timeout) {\n\n      function preLink($scope, $element, $attributes, $controllers) {\n        var controller = $controllers[0];\n        var ngModelController = $controllers[1];\n        var editorElement = $element.find('div');\n        editorElement.attr('id', $attributes.id + '-content');\n        controller.createInstance(editorElement.attr('id'));\n      }\n\n      function postLink($scope, $element, $attributes, $controllers) {\n        var controller = $controllers[0];\n        var ngModelController = $controllers[1];\n        var editorElement = $element.find('div');\n\n        // Initialize the editor content when it is ready.\n        controller.ready().then(function initialize() {\n          // Sync view on specific events.\n          ['change', 'blur'].forEach(function syncViewEvent(event) {\n            controller.onEvent(event, function syncView() {\n              ngModelController.$setViewValue(controller.nativeEditor().getData() || '');\n            });\n          });\n\n          $scope.$watch($attributes.readonly, function (newValue, oldValue) {\n            if(newValue != oldValue){\n              controller.nativeEditor().setReadOnly(!! newValue);\n            }\n          });\n\n          controller.onEvent('focus', function syncTouched() {\n            ngModelController.$setTouched();\n          });\n\n          // Defer the ready handler calling to ensure that the editor is\n          // completely ready and populated with data.\n          $timeout(function () {\n            $parse($attributes.onready)($scope);\n          });\n\n        });\n\n        // Set editor data when view data change.\n        ngModelController.$render = function syncEditor() {\n          controller.ready().then(function () {\n            controller.nativeEditor().setData(ngModelController.$viewValue || '', {\n              noSnapshot: true,\n              callback: function () {\n                // Amends the top of the undo stack with the current DOM changes\n                // ie: merge snapshot with the first empty one\n                // http://docs.ckeditor.com/#!/api/CKEDITOR.editor-event-updateSnapshot\n                controller.nativeEditor().fire('updateSnapshot');\n              }\n            });\n          });\n        };\n      }\n\n      var controller = [\n        '$q', '$scope',\n        function alloyEditorController($q, $scope) {\n          var self = this;\n          var instance;\n          var readyDeferred = $q.defer(); // a deferred to be resolved when the editor is ready\n\n          /**\n          * create a instance of Editor.\n          *\n          * @param {String} elementId\n          *\n          * @returns {Object} instance of editor.\n          */\n          self.createInstance = function createInstance(elementId) {\n            console.log(\"teste 01\", elementId,  AlloyEditor, AlloyEditor.editable);\n            instance = AlloyEditor.editable(elementId);\n            console.log(\"teste 02\");\n            self.onEvent('instanceReady', function() {\n              readyDeferred.resolve(true);\n            });\n\n            console.log(\"teste 03\");\n          };\n\n          /**\n          * Listen on events of a given type.\n          * This make all event asynchronous and wrapped in $scope.$apply.\n          *\n          * @param {String} event\n          * @param {Function} listener\n          *\n          * @returns {Function} Deregistration function for this listener.\n          */\n          self.onEvent = function (event, listener) {\n            self.nativeEditor().on(event, asyncListener);\n\n            function asyncListener() {\n              var args = arguments;\n              $timeout(function () {\n                applyListener.apply(null, args);\n              });\n            }\n\n            function applyListener() {\n              var args = arguments;\n              $scope.$apply(function () {\n                listener.apply(null, args);\n              });\n            }\n\n            // Return the deregistration function\n            return function $off() {\n              self.nativeEditor().removeListener(event, applyListener);\n            };\n          };\n\n          /**\n          * Check if the editor if ready.\n          *\n          * @returns {Promise}\n          */\n          self.ready = function ready() {\n            return readyDeferred.promise;\n          };\n\n          self.nativeEditor = function nativeEditor() {\n            return instance.get('nativeEditor');\n          };\n\n          // Destroy editor when the scope is destroyed.\n          $scope.$on('$destroy', function onDestroy() {\n            // do not delete too fast or pending events will throw errors\n            readyDeferred.promise.then(function() {\n              instance.destroy();\n            });\n          });\n        }\n      ];\n\n      function compile(tElement, tAttrs, transclude) {\n        if(!tAttrs.id) {\n          throw Error('The alloy-editor element must have id attribute.');\n        }\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n\n      return {\n        restrict: 'E',\n        require: ['alloyEditor', 'ngModel'],\n        template: '<div class=\"alloy-editor\"></div>',\n        controller: controller,\n        compile: compile\n      };\n    }\n  ]);\n}));\n"],"sourceRoot":"/source/"}